import{_ as a,M as t,p,q as o,Q as n,t as e,N as c,a1 as u}from"./framework-344bb0e4.js";const l={},i=u(`<h1 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> Plugins</h1><h2 id="protocol" tabindex="-1"><a class="header-anchor" href="#protocol" aria-hidden="true">#</a> Protocol</h2><p>Plugins use JSON-RPC over stdin/stdout (much in the same way VSCode plugins do). The protocol is split into two stages.</p><p>The first stage of the protocol deals with the initial discovery of the plugin. A plugin is started up and then asked to reply with its configuration. Much the same was as commands, plugins have a signature that they respond to Nu with. Once Nu has this signature, it knows how to later invoke the plugin to do work.</p><p>The second stage is the actual doing of work. Here the plugins are sent either a stream of data where they act over the stream element-wise as a filter, or they take all the elements at once in a final processing step as a sink.</p><h2 id="discovery" tabindex="-1"><a class="header-anchor" href="#discovery" aria-hidden="true">#</a> Discovery</h2><p>Nu discovers plugins by checking all directories specified by <code>plugin_dirs</code> config entry and the directory where <code>nu</code> executable lies. You can change the configuration by executing <code>config set plugin_dirs [&quot;/path&quot;,&quot;/to&quot;,&quot;/search&quot;]</code> in Nu. In each directory, Nu is looking for executable files that match the pattern <code>nu_plugin_*</code> where <code>*</code> is a minimum of one alphanumeric character. On Windows, this has a similar pattern of <code>nu_plugin_*.exe</code> or <code>nu_plugin_*.bat</code>.</p><p>Once a matching file has been discovered, Nu will invoke the file and pass to it the first JSON-RPC command: Signature. The plugin then replies with the signature of the plugin, which, once deserialized, is identical to the signature commands use.</p><p>Nu continues in this way until it has traveled across all directories in the path.</p><p>After it has traversed the path, it will look in two more directories: the target/debug and the target/release directories. It will pick one or the other depending whether Nu was compiled in debug mode or release mode, respectively. This allows for easier testing of plugins during development.</p><h2 id="creating-a-plugin-in-rust" tabindex="-1"><a class="header-anchor" href="#creating-a-plugin-in-rust" aria-hidden="true">#</a> Creating a plugin (in Rust)</h2><p>In this section, we&#39;ll walk through creating a Nu plugin using Rust.</p><p>Let&#39;s create our project. For this example, we&#39;ll create a simple <code>len</code> command which will return the length of strings it&#39;s passed.</p><p>First off, we&#39;ll create our plugin:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cargo</span> new nu_plugin_len
<span class="token operator">&gt;</span> <span class="token builtin class-name">cd</span> nu_plugin_len
</code></pre></div><p>Next, we&#39;ll add <code>nu</code> to our project&#39;s dependencies.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cargo</span> <span class="token function">add</span> nu-plugin nu-protocol
</code></pre></div><p>The <code>Cargo.toml</code> file should now look something like the following.</p><div class="language-toml" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;nu_plugin_len&quot;</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1.0&quot;</span>
<span class="token key property">edition</span> <span class="token punctuation">=</span> <span class="token string">&quot;2021&quot;</span>

<span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">nu-plugin</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.80.0&quot;</span> <span class="token comment"># These version numbers may differ</span>
<span class="token key property">nu-protocol</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.80.0&quot;</span>
</code></pre></div><p>With this, we can open up <code>src/main.rs</code> and create our plugin.</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">nu_plugin<span class="token punctuation">::</span></span><span class="token punctuation">{</span>serve_plugin<span class="token punctuation">,</span> <span class="token class-name">LabeledError</span><span class="token punctuation">,</span> <span class="token class-name">Plugin</span><span class="token punctuation">,</span> <span class="token class-name">JsonSerializer</span><span class="token punctuation">,</span> <span class="token class-name">EvaluatedCall</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">nu_protocol<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Value</span><span class="token punctuation">,</span> <span class="token class-name">PluginSignature</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Len</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span> <span class="token class-name">Len</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">Self</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Plugin</span> <span class="token keyword">for</span> <span class="token class-name">Len</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">signature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">PluginSignature</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">PluginSignature</span><span class="token punctuation">::</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;len&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">usage</span><span class="token punctuation">(</span><span class="token string">&quot;calculates the length of its input&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">input_type</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">::</span><span class="token class-name">String</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">output_type</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">::</span><span class="token class-name">Int</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>
        call<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">EvaluatedCall</span><span class="token punctuation">,</span>
        input<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Value</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token punctuation">,</span> <span class="token class-name">LabeledError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;len&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">match</span> input <span class="token punctuation">{</span>
            <span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">String</span><span class="token punctuation">{</span> val<span class="token punctuation">,</span> span <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>
                <span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">Int</span> <span class="token punctuation">{</span> val<span class="token punctuation">:</span> val<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i64</span><span class="token punctuation">,</span> span<span class="token punctuation">:</span> span<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
            _ <span class="token operator">=&gt;</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">LabeledError</span> <span class="token punctuation">{</span>
                label<span class="token punctuation">:</span> <span class="token string">&quot;Expected String input from pipeline&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                msg<span class="token punctuation">:</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;requires string input; got {}&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">get_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                span<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">serve_plugin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Len</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JsonSerializer</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>There are a few moving parts here, so let&#39;s break them down one by one.</p><p>First off, let&#39;s look at main:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">serve_plugin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Len</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JsonSerializer</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In main, we just call a single function <code>serve_plugin</code>. This will do the work of calling into our plugin, handling the JSON serialization/deserialization, and sending values and errors back to Nu for us. To start it up, we pass it something that implements the <code>Plugin</code> trait and something that implements the <code>PluginEncoder</code> trait. We&#39;re given a choice of serialization formats that Nu supports. Here, we select JSON.</p><p>Next, above main, is this implementation of the <code>Plugin</code> trait for our particular plugin. Here, we&#39;ll implement the Plugin trait for our type, Len, which we&#39;ll see more of soon. Let&#39;s take a look at how we implement this trait:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Plugin</span> <span class="token keyword">for</span> <span class="token class-name">Len</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">signature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">PluginSignature</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">PluginSignature</span><span class="token punctuation">::</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;len&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">usage</span><span class="token punctuation">(</span><span class="token string">&quot;calculates the length of its input&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">input_type</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">::</span><span class="token class-name">String</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">output_type</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">::</span><span class="token class-name">Int</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>There are two methods required for this implementation. The first is the <code>signature</code> part, which is run by Nu when it first starts up. This tells Nu the basic information about the plugin: its name, the parameters it takes, the description, what kind of plugin it is, and defines the input and output types. Here, we tell Nu that the name is &quot;len&quot;, give it a basic description for <code>help</code> to display and declare that we expect to be passed a string and will return an integer.</p><p>Next, in the <code>run</code> implementation, we describe how to do work as values flow into this plugin. Here, we receive a <code>Value</code> type that we expect to be a string. We also return either <code>Value</code> or an error.</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Plugin</span> <span class="token keyword">for</span> <span class="token class-name">Len</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>
        call<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">EvaluatedCall</span><span class="token punctuation">,</span>
        input<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Value</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token punctuation">,</span> <span class="token class-name">LabeledError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;len&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">match</span> input <span class="token punctuation">{</span>
            <span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">String</span><span class="token punctuation">{</span> val<span class="token punctuation">,</span> span <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>
                <span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">Int</span> <span class="token punctuation">{</span> val<span class="token punctuation">:</span> val<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i64</span><span class="token punctuation">,</span> span<span class="token punctuation">:</span> span<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
            _ <span class="token operator">=&gt;</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">LabeledError</span> <span class="token punctuation">{</span>
                label<span class="token punctuation">:</span> <span class="token string">&quot;Expected String input from pipeline&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                msg<span class="token punctuation">:</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;requires string input; got {}&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">get_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                span<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>We use Rust&#39;s pattern matching to check the type of the <code>Value</code> coming in, and then operate with it if it&#39;s a string. The value also contains a <code>span</code> so it carries with it where the value came from. If the value isn&#39;t a string, we give an error and let the user know where the value came from that is causing the problem. On error, we use <code>call.head</code> as the span so that Nu can underline the offending command name in the error message.</p><p>Our <code>Len</code> command doesn&#39;t require any parameters, but if it did we&#39;d get them from the <code>EvaluatedCall</code>.</p><p>Next, let&#39;s look at <code>Len</code> itself to see what it&#39;s doing:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Len</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span> <span class="token class-name">Len</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">Self</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>We create a very simple <code>Len</code>, in fact, it has no structure at all. Instead, it&#39;s just a placeholder that will let us implement the plugin.</p><p>The <code>new</code> method is optional, it&#39;s just a convenient way to create a new value of the <code>Len</code> type to pass into <code>serve_plugin</code> later.</p><p>Lastly, let&#39;s look at the top of the file:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">nu_plugin<span class="token punctuation">::</span></span><span class="token punctuation">{</span>serve_plugin<span class="token punctuation">,</span> <span class="token class-name">LabeledError</span><span class="token punctuation">,</span> <span class="token class-name">Plugin</span><span class="token punctuation">,</span> <span class="token class-name">JsonSerializer</span><span class="token punctuation">,</span> <span class="token class-name">EvaluatedCall</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">nu_protocol<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Value</span><span class="token punctuation">,</span> <span class="token class-name">PluginSignature</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Here we import everything we need -- types and functions -- to be able to create our plugin.</p><p>Once we have finished our plugin, to use it all we need to do is install it.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cargo</span> <span class="token function">install</span> <span class="token parameter variable">--path</span> <span class="token builtin class-name">.</span>
</code></pre></div><p>Once <code>nu</code> starts up, it will discover the plugin and register it as a command. If you&#39;re already running <code>nu</code> during the installation process of your plugin, ensure you restart <code>nu</code> so that it can load and register your plugin or register it manually with <code>register ./target/release/nu_plugin_len</code>.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; nu
&gt; &quot;hello&quot; | len
5
&gt; help len
calculates the length of its input

Usage:
  &gt; len

Flags:
  -h, --help - Display the help message for this command

Signatures:
  &lt;string&gt; | len -&gt; &lt;int&gt;
</code></pre></div><h2 id="creating-a-plugin-in-python" tabindex="-1"><a class="header-anchor" href="#creating-a-plugin-in-python" aria-hidden="true">#</a> Creating a plugin (in Python)</h2><p>We can also create plugins in other programming languages, although you will not benefit from the plugin interface libraries that ship with Nu. In this section, we&#39;ll write the same <code>len</code> plugin in Python.</p><p>First, let&#39;s look at the full plugin:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/local/bin/python3</span>
<span class="token keyword">import</span> json
<span class="token keyword">import</span> sys


<span class="token keyword">def</span> <span class="token function">signature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;sig&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;len&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;usage&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;calculates the length of its input&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;extra_usage&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;search_terms&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;required_positional&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;optional_positional&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;rest_positional&quot;</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
            <span class="token string">&quot;vectorizes_over_list&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
            <span class="token string">&quot;named&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;input_type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;String&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;output_type&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;Int&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;input_output_types&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;allow_variants_without_examples&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
            <span class="token string">&quot;is_filter&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
            <span class="token string">&quot;creates_scope&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
            <span class="token string">&quot;allows_unknown_args&quot;</span><span class="token punctuation">:</span><span class="token boolean">False</span><span class="token punctuation">,</span>
            <span class="token string">&quot;category&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;Default&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&quot;examples&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>


<span class="token keyword">def</span> <span class="token function">send_encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">send_error</span><span class="token punctuation">(</span>error_msg<span class="token punctuation">,</span> span<span class="token punctuation">)</span><span class="token punctuation">:</span>
        error <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Error&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;label&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Len Error&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;msg&quot;</span><span class="token punctuation">:</span> error_msg<span class="token punctuation">,</span>
                <span class="token string">&quot;span&quot;</span><span class="token punctuation">:</span> span<span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">handle_call</span><span class="token punctuation">(</span>call_info<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token builtin">input</span> <span class="token operator">=</span> call_info<span class="token punctuation">[</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;Value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">]</span>
        output <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string">&quot;Value&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Int&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
                    <span class="token string">&quot;val&quot;</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">[</span><span class="token string">&quot;val&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;span&quot;</span><span class="token punctuation">:</span> <span class="token builtin">input</span><span class="token punctuation">[</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span>output<span class="token punctuation">]</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        send_error<span class="token punctuation">(</span>
            <span class="token string">&quot;Could not process input&quot;</span><span class="token punctuation">,</span>
            call_info<span class="token punctuation">[</span><span class="token string">&quot;call&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    send_encoder<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    command <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> command <span class="token operator">==</span> <span class="token string">&quot;Signature&quot;</span><span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;Signature&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span>signature<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> <span class="token string">&quot;CallInfo&quot;</span> <span class="token keyword">in</span> command<span class="token punctuation">:</span>
        handle_call<span class="token punctuation">(</span>command<span class="token punctuation">[</span><span class="token string">&quot;CallInfo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        send_error<span class="token punctuation">(</span><span class="token string">&quot;Unknown command passed to plugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Note: there are ways to make the python more robust, but here we&#39;ve left it simple to help with explanations.</p><p>Let&#39;s look at how this plugin works, from the bottom to the top:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    send_encoder<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    command <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> command <span class="token operator">==</span> <span class="token string">&quot;Signature&quot;</span><span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;Signature&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span>signature<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> <span class="token string">&quot;CallInfo&quot;</span> <span class="token keyword">in</span> command<span class="token punctuation">:</span>
        handle_call<span class="token punctuation">(</span>command<span class="token punctuation">[</span><span class="token string">&quot;CallInfo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        send_error<span class="token punctuation">(</span><span class="token string">&quot;Unknown command passed to plugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>For this plugin, we have to serve two basic roles: responding to a request for the plugin configuration, and doing the actual filtering. This code acts as our main routine, responding to a message from Nu by doing some work and then returning a response: either returning with the plugin signature or handling input.</p><p>The first thing our plugin must do is write out the desired serialization format, in this case JSON. We do that with the <code>send_encoder</code> method. Then we read the JSON serialized command that Nu sends us.</p><p>When we&#39;re sent a &#39;Signature&#39; request, we respond with the signature of this plugin, which is a bit of information to tell Nu how the command should be called.</p><p>When sent a <code>CallInfo</code> request, we parse the supplied JSON and respond to the request</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">handle_call</span><span class="token punctuation">(</span>call_info<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token builtin">input</span> <span class="token operator">=</span> call_info<span class="token punctuation">[</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;Value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">]</span>
        output <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string">&quot;Value&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Int&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
                    <span class="token string">&quot;val&quot;</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">[</span><span class="token string">&quot;val&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;span&quot;</span><span class="token punctuation">:</span> <span class="token builtin">input</span><span class="token punctuation">[</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span>output<span class="token punctuation">]</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        send_error<span class="token punctuation">(</span>
            <span class="token string">&quot;Could not process input&quot;</span><span class="token punctuation">,</span>
            call_info<span class="token punctuation">[</span><span class="token string">&quot;call&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
</code></pre></div><p>The work of processing input is done by this <code>handle_call</code> function. Here, we assume we&#39;re given strings (we could make this more robust in the future and return meaningful errors otherwise), and then we extract the string we&#39;re given. From there, we measure the length of the string and create a new <code>Int</code> value for that length.</p><p>Finally, we use the same item we were given and replace the payload with this new Int. We do this to reuse the <code>span</code> that was passed to us with the string, though this is an optional step. We could have instead opted to create new metadata and passed that out instead.</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json
<span class="token keyword">import</span> sys
</code></pre></div><p>All of this takes a few imports to accomplish, so we make sure to include them.</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/local/bin/python3</span>
</code></pre></div><p>Finally, to make it easier to run our Python, we make this file executable (using something like <code>chmod +x nu_plugin_len.py</code>) and add the path to our python at the top. This trick works for Unix-based platforms, for Windows we would need to create an .exe or .bat file that would invoke the python code for us.</p><h2 id="creating-a-plugin-in-c" tabindex="-1"><a class="header-anchor" href="#creating-a-plugin-in-c" aria-hidden="true">#</a> Creating a plugin (in C#)</h2><p>You can learn about creating a Nu plugin with C# here:</p>`,63),k={href:"https://github.com/myty/nu-plugin-lib",target:"_blank",rel:"noopener noreferrer"};function r(d,g){const s=t("ExternalLinkIcon");return p(),o("div",null,[i,n("ul",null,[n("li",null,[n("a",k,[e(".Net Core nu-plugin-lib"),c(s)])])])])}const m=a(l,[["render",r],["__file","plugins.html.vue"]]);export{m as default};
